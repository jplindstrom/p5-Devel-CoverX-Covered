<!doctype html>
%html{:lang => "en"}
  %head
    %meta{:charset => "utf-8"}/
    %title Beyond Devel::Cover
    %meta{:content => "Devel::CoverX::Covered Lightning Talk", :name => "description"}/
    %meta{:content => "Johan Lindstrom", :name => "author"}/
    %meta{:content => "yes", :name => "apple-mobile-web-app-capable"}/
    %meta{:content => "black-translucent", :name => "apple-mobile-web-app-status-bar-style"}/
    %meta{:content => "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no", :name => "viewport"}/
    %link{:href => "reveal.js/css/reveal.min.css", :rel => "stylesheet"}/
    %link#theme{:href => "reveal.js/css/theme/default.css", :rel => "stylesheet"}/
    / For syntax highlighting
    %link{:href => "reveal.js/lib/css/zenburn.css", :rel => "stylesheet"}/


    / For nice fonts, load more here
    / Go to http://www.google.com/webfonts
    / * Add to collection
    / * Use
    / * pick which styles
    / * find the link to add here
    %link{ :href=> 'http://fonts.googleapis.com/css?family=Merriweather:400,700', :rel => 'stylesheet', :type => 'text/css'}
    %link{ :href=> 'http://fonts.googleapis.com/css?family=Open+Sans:600', :rel => 'stylesheet', :type => 'text/css'}
    -# / Nice fonts combos:
    -# / http://designshack.net/articles/css/10-great-google-font-combinations-you-can-copy/

    %link{ :rel => "stylesheet", :href => "index.css" }


    / Override the reveal.js fonts here, after loading them above
    :css
      .reveal h1 {
        font-family: 'Merriweather', serif;
        text-transform: none;
        line-height: 1.0em;
      }
      .reveal h2 {
        font-family: 'Merriweather', serif;
        text-transform: none;
      }
      .reveal h3 {
        font-family: 'Open Sans', sans-serif;
        text-transform: none;
      }
      .reveal p {
        font-family: 'Open Sans', sans-serif;
        text-transform: none;
      }

      /* Misc layout */
      table.centric {
        margin-left: auto;
        margin-right: auto;
      }
      table.centric td {
        vertical-align: middle;
        text-align: center;
      }

      /* Styles for the specific data-state for the last slide %/
      html.the-end .state-background {
        background-color: rgba(0,0,0, 0.8);
      }


      .strike {
        text-decoration: line-through;
      }



      /* Presentation CSS */
      table.coverage td {
        padding-left: 20px;
        padding-right: 20px;
        padding-bottom: 6px;
      }
      td.covered {
        background-color: #096;
      }
      td.covered1 {
        background-color: #060;
      }
      td.covered2 {
        background-color: #096;
      }
      td.covered3 {
        background-color: #0C9;
      }

      .image {
        background-color: #FFF;
      }

      section.no-image-border img {
        border: 0px;
        box-shadow: 0 0 0px;
      }


    / If the query includes 'print-pdf', use the PDF print sheet
    :javascript
      document.write( '<link rel="stylesheet" href="reveal.js/css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
    <script src="reveal.js/lib/js/html5shiv.js"></script>
  %body
    .reveal
      / Any section element inside of this container is displayed as a slide
      .slides

        %section
          %h1 Beyond
          %h1 Devel::Cover

          %p &nbsp;
          %p &nbsp;
          %p Johan Lindstrom - @jplindstrom



        %section
          %h1 Devel::Cover
          %p &nbsp;
          %h3 Code Coverage Tool
          %h3 Paul Johnson


        %section
          %h3 Which code is covered by tests?
          %p &nbsp;
          %p &nbsp;

          %div.side-by-side
            %div.side
              %table.coverage{ :width => "100%" }
                %tbody
                  %tr
                    %td.covered App::Controller::Book
                  %tr
                    %td App::Controller::Author
                  %tr
                    %td.covered App::Schema::Book
                  %tr
                    %td App::Schema::Author
                  %tr
                    %td.covered App::Subscription
                  %tr
                    %td.covered Book::ISBN
            %div.side
              %table.coverage{ :width => "100%" }
                %tbody
                  %tr
                    %td t/app/controller_book.t
                  %tr
                    %td t/app/schema/book.t
                  %tr
                    %td t/subscribe.t
                  %tr
                    %td t/subscribe-unavailable.t



          %aside.notes
            %p Code coverage tool
            %p <-- Test suite -- Source code -->
            %p Which parts of the Source are tested
            %p Some source files are covered, some not


        -# %section
        -#   %h2 Levels of Detail
        -#   %p &nbsp;
        -#   %ul
        -#     %li Sub
        -#     %li Statement
        -#     %li Branch
        -#     %li Condition


        %section
          %h2 Reports
          %p Files
          %div.image
            %img(src = "images/report_files.png")

          %aside.notes
            %p What you get
            %p Reports - formats - web page


        %section
          %h2 Reports
          %p Source Code
          %div.image
            %img(src = "images/report_file.png")

          %aside.notes
            %p Which lines are covered



        %section
          %h1 Large
          %h1 Code Bases
          %ul
            %li Which bits test which features?
            %li Special Idioms
            %li Navigation Tests <-> Source

          %aside.notes
            %p Useful. But.
            %p Large Code Bases
            %p Different set of problems
            %p Unit tests sometimes obvious. Integration tests not clear.



        %section
          %h2 Coarse granularity
          %p &nbsp;

          %div.side-by-side
            %div.side
              %table.coverage{ :width => "100%" }
                %tbody
                  %tr
                    %td.covered App::Controller::Book
                  %tr
                    %td App::Controller::Author
                  %tr
                    %td.covered App::Schema::Book
                  %tr
                    %td App::Schema::Author
                  %tr
                    %td.covered App::Subscription
                  %tr
                    %td.covered Book::ISBN
            %div.side
              %table.coverage{ :width => "100%" }
                %tbody
                  %tr
                    %td t/app/controller_book.t
                  %tr
                    %td &nbsp;
                  %tr
                    %td t/app/schema/book.t
                  %tr
                    %td &nbsp;
                  %tr
                    %td t/subscribe.t
                  %tr
                    %td t/subscribe-unavailable.t

          %aside.notes
            %p With Devel::Cover
            %p Coarse granularity
            %p The whole test suite and the whole source tree




        %section
          %h2 Fine granularity
          %p &nbsp;

          %div.side-by-side
            %div.side
              %table.coverage{ :width => "100%" }
                %tbody
                  %tr
                    %td.covered1 App::Controller::Book
                  %tr
                    %td App::Controller::Author
                  %tr
                    %td.covered2 App::Schema::Book
                  %tr
                    %td App::Schema::Author
                  %tr
                    %td.covered3 App::Subscription
                  %tr
                    %td.covered2 Book::ISBN
            %div.side
              %table.coverage{ :width => "100%" }
                %tbody
                  %tr
                    %td.covered1 t/app/controller_book.t
                  %tr
                    %td &nbsp;
                  %tr
                    %td.covered2 t/app/schema/book.t
                  %tr
                    %td &nbsp;
                  %tr
                    %td.covered3 t/subscribe.t
                  %tr
                    %td.covered3 t/subscribe-unavailable.t

          %aside.notes
            %p What we need is something more like this
            %p So we can see which specific test files cover which parts


        -# Schema
        %section
          %h2 Fine granularity
          %p &nbsp;

          %div.side-by-side
            %div.side
              %table.coverage{ :width => "100%" }
                %tbody
                  %tr
                    %td App::Controller::Book
                  %tr
                    %td App::Controller::Author
                  %tr
                    %td.covered2 App::Schema::Book
                  %tr
                    %td App::Schema::Author
                  %tr
                    %td App::Subscription
                  %tr
                    %td Book::ISBN
            %div.side
              %table.coverage{ :width => "100%" }
                %tbody
                  %tr
                    %td t/app/controller_book.t
                  %tr
                    %td &nbsp;
                  %tr
                    %td.covered2 t/app/schema/book.t
                  %tr
                    %td &nbsp;
                  %tr
                    %td t/subscribe.t
                  %tr
                    %td t/subscribe-unavailable.t

          %aside.notes
            %p A Unit test covers a single class

        -# Controller
        %section
          %h2 Fine granularity
          %p &nbsp;

          %div.side-by-side
            %div.side
              %table.coverage{ :width => "100%" }
                %tbody
                  %tr
                    %td.covered1 App::Controller::Book
                  %tr
                    %td App::Controller::Author
                  %tr
                    %td.covered1 App::Schema::Book
                  %tr
                    %td App::Schema::Author
                  %tr
                    %td App::Subscription
                  %tr
                    %td Book::ISBN
            %div.side
              %table.coverage{ :width => "100%" }
                %tbody
                  %tr
                    %td.covered1 t/app/controller_book.t
                  %tr
                    %td &nbsp;
                  %tr
                    %td t/app/schema/book.t
                  %tr
                    %td &nbsp;
                  %tr
                    %td t/subscribe.t
                  %tr
                    %td t/subscribe-unavailable.t

          %aside.notes
            %p Or maybe two


        -# Subscription
        %section
          %h2 Fine granularity
          %p &nbsp;

          %div.side-by-side
            %div.side
              %table.coverage{ :width => "100%" }
                %tbody
                  %tr
                    %td.covered3 App::Controller::Book
                  %tr
                    %td App::Controller::Author
                  %tr
                    %td.covered3 App::Schema::Book
                  %tr
                    %td App::Schema::Author
                  %tr
                    %td.covered3 App::Subscription
                  %tr
                    %td.covered3 Book::ISBN
            %div.side
              %table.coverage{ :width => "100%" }
                %tbody
                  %tr
                    %td t/app/controller_book.t
                  %tr
                    %td &nbsp;
                  %tr
                    %td t/app/schema/book.t
                  %tr
                    %td &nbsp;
                  %tr
                    %td.covered3 t/subscribe.t
                  %tr
                    %td t/subscribe-unavailable.t

          %aside.notes
            %p Whereas a Feature test covers files across the whole stack
            %p So this level of detail is interesting


        %section
          %h2 Devel::CoverX::Covered

          %aside.notes
            %p With this module
            %p Devel::CoverX::Covered
            %p you can get that detail


        -# -# Devel::Cover
        -# %section
        -#   %h2 How to run
        -#   %pre
        -#     %code.perl
        -#       :preserve
        -#         &nbsp;
        -#             # Run with Devel::Cover
        -#             PERL5OPT=-MDevel::Cover prove -r t



        -#             # Generate cover_db and report
        -#             cover -report Html_basic
        -#         &nbsp;

        -#   %p Devel::Cover incantation


        -# -# Devel::CoverX::Covered
        -# %section
        -#   %h2 How to run
        -#   %pre
        -#     %code.perl
        -#       :preserve
        -#         &nbsp;
        -#             # Run with Devel::Cover
        -#             PERL5OPT=-MDevel::Cover prove -r t

        -#             covered runs

        -#             # Generate cover_db and report
        -#             cover -report Html_basic
        -#         &nbsp;

        -#   %p Devel::CoverX::Covered incantation


        %section
          %h3
          %h1 SQLite
          %p &nbsp;
          %p cover_db ⇝ covered/covered-0.01.db


          %aside.notes
            %p Run Devel::Cover like normal
            %p Then you use this module
            %p Generates an SQLite database with this extra detail
            %p You don't use the SQLite database though


        -# CLI
        %section
          %h3 Source file ⇒ Test files
          %p &nbsp;
          %pre
            %code.perl
              :preserve
                &nbsp;
                &nbsp;
                    covered <b>covering</b> \
                        --source_file=lib/MyApp/DoStuff.pm


                    t/myapp-do_stuff/edge_case1.t
                    t/myapp-do_stuff/edge_case2.t
                    t/myapp-do_stuff.t
                &nbsp;
                &nbsp;
          %p

          %aside.notes
            %p Command line tool


        -# CLI
        %section
          %h3 Source sub ⇒ Test files
          %p &nbsp;
          %pre
            %code.perl
              :preserve
                &nbsp;
                &nbsp;
                    covered <b>covering</b> \
                        --source_file=lib/MyApp/DoStuff.pm \
                        <b>--sub=get_odd_values</b>

                    t/myapp-do_stuff/edge_case1.t

                &nbsp;
                &nbsp;
                &nbsp;
          %p


        -# CLI
        %section
          %h3 Source files ⇐ Test file
          %p &nbsp;
          %pre
            %code.perl
              :preserve
                &nbsp;
                &nbsp;
                    covered <b>by</b> \
                        --test_file=t/myapp-do_stuff.t

                    lib/MyApp/DoStuff.pm
                    lib/MyApp/DoStuff/DoOtherStuff.pm
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
          %p


        -# CLI
        %section
          %h3 Source file ⇒ Covered Subs
          %p &nbsp;
          %pre
            %code.perl
              :preserve
                &nbsp;
                &nbsp;
                    covered <b>subs</b> \
                        --source_file=lib/MyApp/DoStuff.pm

                    new       4
                    as_string 32
                    as_xml    0
                    do_stuff  4
                &nbsp;
                &nbsp;
          %p

          %aside.notes
            %p Finally we can take a source file
            %p and see whether the subs in it are covered
            %p &nbsp;



        %section
          %h1 Useful
          %p vs
          %h1 Usable

          %aside.notes
            %p All the information we need to deal with Large Code Bases
            %p Clearly Useful
            %p But not very Usable
            %p Quite clunky - typing things in a shell - copy/pasting file names around
            %p Break our flow


        %section
          %h1 Integrated
          %p and
          %h1 Automatic

          %aside.notes
            %p What we want is something
            %p Integrated into our editing environment
            %p Automated so we don't have to do any manual steps


        %section
          %h1 Emacs
          %p &nbsp;
          %h2 Devel::PerlySense

          %aside.notes
            %p And if you use Emacs
            %p you can get this
            %p using the Devel::PerlySense module
            %p This is what it looks like then


        %section
          %h3 Source file ⇒ Test files
          %p &nbsp;
          %div
            %img(src = "images/goto_tests_source_file_other.png")

          %aside.notes
            %p If we're in a source file
            %p Go to Other Test Files
            %p A dropdown menu with test files
            %p Choose one and it will open that file



        %section
          %h3 Source sub ⇒ Test files
          %p &nbsp;
          %div
            %img(src = "images/goto_tests_source_sub_other.png")

          %aside.notes
            %p Cursor on the sub declaration
            %p The tests are limited to just that sub
            %p If we have a Test file it also works the other way around



        %section.no-image-border
          %h3 Visualise
          %h3 covered subs
          %div.side-by-side.image
            %div.side
              %img(src = "images/covered_sub_green_report.png")
            %div.side
              %img(src = "images/covered_sub_green_source.png")

          %aside.notes
            %p Finally, we can use that list of subs
            %p highlight in the source code itself
            %p Look at the sub keyword and the little Green underline


        %section.no-image-border
          %h3 Visualise
          %h3 uncovered subs
          %div.side-by-side.image
            %div.side
              %img(src = "images/covered_sub_red_report.png")
            %div.side
              %img(src = "images/covered_sub_red_source.png")

          %aside.notes
            %p The Red line means it's not covered at all
            %p The decoration is quite discrete -- Intentional
            %p We don't want to turn the source into a Christmas Tree
            %p We want an environment rich with Ambient information
            %p It's there when we need it



        %section
          %h1 CPAN
          %p &nbsp;
          %ul
            %li cpanm Devel::CoverX::Covered
            %li cpanm Devel::PerlySense

          %aside.notes
            %p This is how you get it


        %section
          %h1 GitHub
          %p &nbsp;
          %ul
            %ul
              %a(href="https://github.com/jplindstrom/p5-Devel-CoverX-Covered") https://github.com/jplindstrom/p5-Devel-CoverX-Covered
            %ul
              %a(href="https://github.com/jplindstrom/p5-Devel-PerlySense") https://github.com/jplindstrom/p5-Devel-PerlySense

          %aside.notes
            %p This is how you contribute



        %section(data-state="the-end")
          %h1 __END__
          %br
          %h3 Thank you!

          %aside.notes
            %p And that's how you go Beyond Devel::Cover
            %p Thanks for listening


    %script{:src => "reveal.js/lib/js/head.min.js"}
    %script{:src => "reveal.js/js/reveal.min.js"}
    :javascript
      // Full list of configuration options available here: JPL
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        controls: false,
        progress: false,
        history: true,
        center: true,

        theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
        transition: Reveal.getQueryHash().transition || 'fade', // default/cube/page/concave/zoom/linear/fade/none

        // Optional libraries used to extend on reveal.js
        dependencies: [
            { src: 'reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
            { src: 'reveal.js/plugin/markdown/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
            { src: 'reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
            { src: 'reveal.js/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
            { src: 'reveal.js/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
            { src: 'reveal.js/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
            // { src: 'reveal.js/plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
        ]
      });
